// Test Case 1: Check if handleBlur() triggers when IBAN field is blurred
// This test case ensures that the handleBlur() function is called correctly when the IBAN field loses focus.

it("should trigger handleBlur on IBAN input field blur", async () => {
  server.use(...handlers);  // Use the necessary handlers
  await act(async () => await renderAddPayee());
  await act(async () => {
    await optionSelected(1); // Select second payee type
  });

  const payeeName = screen.getByTestId("iban-input");
  await fireEvent.blur(payeeName, { target: { value: "New IBAN Value" } });
  expect(payeeName).toHaveValue("New IBAN Value"); // Ensure value is updated
});


// Test Case 2: Check if API call is triggered on IBAN blur (success case)
// This test case checks if the API call is triggered successfully when the IBAN field is blurred.

it("should handle API call on IBAN blur for success case", async () => {
  server.use(...handlersSuccess); // Success handlers
  server.use(...handlers);  // Use necessary data handlers
  await act(async () => await renderAddPayee());
  await act(async () => {
    await optionSelected(1); // Select second payee type
  });

  const payeeName = screen.getByTestId("iban-input");
  await fireEvent.blur(payeeName, { target: { value: "1234567890" } });

  // Check that API call is triggered and the value is updated
  expect(await payeeName).toHaveValue("1234567890");
  // Additional assertions related to the response handling
});

// Test Case 3: Check if API call triggers on IBAN blur (failure case)
// This case checks if the API failure is properly handled when the IBAN field is blurred.

// Test Case 3: Check if API call triggers on IBAN blur (failure case)
// This case checks if the API failure is properly handled when the IBAN field is blurred.
it("should handle API failure on IBAN blur", async () => {
  server.use(...handlersFailure); // Failure handlers
  server.use(...handlers);  // Use necessary data handlers
  await act(async () => await renderAddPayee());
  await act(async () => {
    await optionSelected(1); // Select second payee type
  });

  const payeeName = screen.getByTestId("iban-input");
  await fireEvent.blur(payeeName, { target: { value: "1234567890" } });

  // Check if error handling occurs correctly (displaying error message or state update)
  await waitFor(() => expect(screen.getByText(/Error Occurred/i)).toBeInTheDocument());
});

// Test Case 4: Check if API call triggers on IBAN blur (failure with specific code)
// This test case ensures that the function handles failure cases with specific error codes (e.g., when status code is 45).
it("should handle specific API failure code on IBAN blur", async () => {
  server.use(...handlersFailureCode); // Failure code handlers
  server.use(...handlers);  // Use necessary data handlers
  await act(async () => await renderAddPayee());
  await act(async () => {
    await optionSelected(1); // Select second payee type
  });

  const payeeName = screen.getByTestId("iban-input");
  await fireEvent.blur(payeeName, { target: { value: "1234567890" } });

  // Check if the specific error code message appears
  await waitFor(() => expect(screen.getByText(/Unable to fetch Beneficiary Name/i)).toBeInTheDocument());
});

// Test Case 5: Check if handleBlur() updates the IBAN input value on focus event
// This case ensures that the IBAN field updates its value correctly when the user focuses on it.

it("should update IBAN value on focus", async () => {
  server.use(...handlers);
  await act(async () => await renderAddPayee());
  await act(async () => {
    await optionSelected(1); // Select second payee type
  });

  const payeeName = screen.getByTestId("iban-input");
  await fireEvent.focus(payeeName, { target: { value: "Focus IBAN" } });
  expect(await payeeName).toHaveValue("Focus IBAN");
});


// Test Case 6: Ensure no API call or action occurs if IBAN is unchanged
// This test case ensures that the handleBlur() function does not trigger any actions if the value of the IBAN field has not changed.

it("should not trigger API call on IBAN blur if value is unchanged", async () => {
  server.use(...handlers); // Use necessary handlers
  await act(async () => await renderAddPayee());
  await act(async () => {
    await optionSelected(1); // Select second payee type
  });

  const payeeName = screen.getByTestId("iban-input");
  await fireEvent.blur(payeeName, { target: { value: "" } });  // No change in value

  // Assert no API call was made (e.g., no loading indicator appears)
  await waitFor(() => expect(screen.queryByText(/Loading.../)).not.toBeInTheDocument());
});
