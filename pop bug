const formatMobileNumber = (number) => {
  if (!number || typeof number !== "string") return "";
  if (!number.startsWith("+971")) return number;

  const countryCode = number.slice(0, 4);      // "+971"
  const localPart = number.slice(4);           // "568902357"
  return `${countryCode} ${localPart}`;
};

selectedAccCurrency = {`Mobile ${formatMobileNumber(contactDetails["mobile"])}`}











const formatMobileNumber = (number) => {
  if (!number || typeof number !== "string") return "";
  if (!number.startsWith("+971")) return number;

  const countryCode = number.slice(0, 4); // +971
  const localPart = number.slice(4); // rest of the number
  return `${countryCode} ${localPart}`;
};

selectedAccCurrency={`Mobile ${formatMobileNumber(contactDetails?.["mobile"] || contactNumNewMobNum)}`}












<AccordionItem
            clsNames={classNames("accordion lt_to", {
              xccy: accountSetupStep === 1,
            })}
            isOpen={accountSetupStep === 1}
            onCollapseClick={() => setAccountSetupStep(1)}
            selected={
              <SelectedCreditCard
                selectedAccBalance={"avail-cash"}
                selectedAccName={contactDetails?.["masked-name"] ? contactDetails?.["masked-name"] : "New Recipient"}
                selectedAccNumber={""}
                selectedAccCurrency={`Mobile ${contactDetails?.["mobile"] || contactNumNewMobNum}`}
                section="To"
              />
            }
            titleLabelId="To"
            subtitleLabelId={"Who would you like to "}
            subtitleLabelIdBold="pay to?"
            dataTestId="step-from"
          >



selectedAccCurrency={
  contactDetails?.["Mobile"]
    ? contactDetails["Mobile"].startsWith("+971")
      ? `Mobile +971 ${contactDetails["Mobile"].slice(4)}`
      : `Mobile ${contactDetails["Mobile"]}`
    : contactNumNewMobNum?.startsWith("+971")
      ? `Mobile +971 ${contactNumNewMobNum.slice(4)}`
      : `Mobile ${contactNumNewMobNum}`
}



phoneNumber:
  contactDetails?.["mobile"]
    ? contactDetails["mobile"].startsWith("+971")
      ? `Mobile +971 ${contactDetails["mobile"].slice(4)}`
      : `Mobile ${contactDetails["mobile"]}`
    : contactNumNewMobNum?.startsWith("+971")
      ? `Mobile +971 ${contactNumNewMobNum.slice(4)}`
      : `Mobile ${contactNumNewMobNum}`



phoneNumber: contactDetails?.["mobile"]?.startsWith("+971")
  ? `Mobile +971 ${contactDetails["mobile"].slice(4)}`
  : `Mobile ${contactDetails?.["mobile"]}`

phoneNumber: contactDetails?.["mobile"] ? contactDetails?.["mobile"] : contactNumNewMobNum

return(
     <div>
                  <h3 className="payee-detail-heading">
                    Payee details in Aani
                  </h3>
                  <ContactCard
                    contact={{
                      fullName: contactDetails?.["masked-name"],
                      phoneNumber: `Mobile ${contactDetails?.["mobile"]}`,
                    }}
                    onClick={() => {}}
                  />
                </div>
)





const rawMobile = contactDetails?.["mobile"] || "";

// Check if the number starts with + and has at least 6 more digits
let formattedMobile = rawMobile;

if (/^\+\d{1,4}\d{6,}$/.test(rawMobile)) {
  const countryCode = rawMobile.match(/^\+\d{1,4}/)[0]; // extract +971
  const number = rawMobile.slice(countryCode.length);   // extract rest of the number
  formattedMobile = ${countryCode} ${number};
}

const phonenumber = Mobile ${formattedMobile};




const handleSelect = (purpose) => {
  setSelectedPurpose(purpose); // (local state if you have one)
  props.setPurposeOfTransfer(purpose); // send to SendMoney
  props.actionOnPOT(false); // close the modal or overlay
};

{props.purposeOfTransfers.map((item, index) => (
  <div
    key={index}
    onClick={() => handleSelect(item)}
    className="purpose-item"
  >
    {item["pop-desc"]}
  </div>
))}


interface Props {
  purposeOfTransfers: any[];
  setPurposeOfTransfer: (val: any) => void;
  actionOnPOT: (flag: boolean) => void;
  module?: string;
}


<PurposeOfTransfer
  purposeOfTransfers={purposeOfTransfers}
  setPurposeOfTransfer={setPurposeOfTransfer}
  actionOnPOT={actionOnPOT}
  module="SM"
/>
