import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import AddPayee from './AddPayee';  // Adjust the import path based on your project structure
import * as api from 'src/api';  // Adjust the import path to your API utility

jest.mock('src/api', () => ({
  post: jest.fn(),  // Mock the post function from API
}));

it('should trigger API call when handleBlur condition is met', async () => {
  // Mocking the API response
  api.post.mockResolvedValue({ success: true });

  // Step 1: Render the component
  render(<AddPayee />);

  // Step 2: Set the required state or props for the condition to be true
  const payeeAccNo = '1234567890';  // Some valid account number
  const ibanFocusValue = '0987654321';  // Different from `payeeAccNo` to satisfy `payeeAccNo !== ibanFocusValue`
  const payeeAccNoErrorMessage = '';  // Error message should be falsy (empty string)
  const beneErrorStatus = false;  // Falsy value to satisfy condition `payeeAccNo !== ibanFocusValue || beneErrorStatus`

  // You may need to mock or set initial state using fireEvent or useState (depending on your component's structure)
  
  // Step 3: Set inputs to trigger the `handleBlur` method
  const payeeAccNoInput = screen.getByTestId('iban-input');  // Adjust test ID as per your input element
  fireEvent.change(payeeAccNoInput, { target: { value: payeeAccNo } });
  
  // Trigger blur event to run `handleBlur`
  fireEvent.blur(payeeAccNoInput);

  // Step 4: Ensure the mock API is called based on the condition
  await waitFor(() => {
    expect(api.post).toHaveBeenCalledTimes(1);  // The API should be called once when the condition is true
  });

  // Step 5: Optionally check for UI updates or API success response
  expect(await screen.getByText('API Call Successful')).toBeInTheDocument();  // Adjust the success message as needed
});
