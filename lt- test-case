import { rest } from "msw";
import { server } from "../../../../../mocks/server";
import { renderHook } from "@testing-library/react-hooks";
import { act } from "react-dom/test-utils";
import { useState } from "react";
import api from "../../../../api"; // Ensure this is the correct API import

const apiUrl =
  process.env.NODE_ENV === "test"
    ? `http://localhost:4000/api/`
    : `${window.origin}/retail/api/v3/`;

// Mocking a hook to store beneficiary name and error status
const useBeneState = () => {
  const [beneName, setBeneName] = useState("");
  const [beneErrorStatus, setBeneErrorStatus] = useState(null);

  const fetchBeneName = (payeeId: string) => {
    api
      .post("cpp-account-proxies", {
        "account-no": payeeId,
        "service-name": "PREPAYMENT_VALIDATION",
      })
      .then((res: any) => {
        if (res.data["customer-name"] && res.data["status-cd"] == 62) {
          setBeneName(res.data["customer-name"]);
        } else {
          setBeneErrorStatus(res.data["status-cd"]);
        }
      })
      .catch((error: any) => {
        setBeneErrorStatus(error.errors[0].status);
      });
  };

  return { beneName, beneErrorStatus, fetchBeneName };
};

// Test suite for fetchBeneName function
describe("fetchBeneName API call", () => {
  it("should set beneName when API returns valid customer-name and status-cd is 62", async () => {
    server.use(
      rest.post(`${apiUrl}cpp-account-proxies`, (req, res, ctx) => {
        return res(
          ctx.status(200),
          ctx.json({
            data: {
              "customer-name": "John Doe",
              "status-cd": 62,
            },
          })
        );
      })
    );

    const { result } = renderHook(() => useBeneState());

    await act(async () => {
      result.current.fetchBeneName("123456789");
    });

    expect(result.current.beneName).toBe("John Doe");
    expect(result.current.beneErrorStatus).toBe(null);
  });

  it("should set beneErrorStatus when API returns a different status-cd", async () => {
    server.use(
      rest.post(`${apiUrl}cpp-account-proxies`, (req, res, ctx) => {
        return res(
          ctx.status(200),
          ctx.json({
            data: {
              "customer-name": null,
              "status-cd": 45,
            },
          })
        );
      })
    );

    const { result } = renderHook(() => useBeneState());

    await act(async () => {
      result.current.fetchBeneName("123456789");
    });

    expect(result.current.beneName).toBe("");
    expect(result.current.beneErrorStatus).toBe(45);
  });

  it("should set beneErrorStatus when API request fails", async () => {
    server.use(
      rest.post(`${apiUrl}cpp-account-proxies`, (req, res, ctx) => {
        return res(
          ctx.status(500),
          ctx.json({
            errors: [{ status: "500", message: "Internal Server Error" }],
          })
        );
      })
    );

    const { result } = renderHook(() => useBeneState());

    await act(async () => {
      result.current.fetchBeneName("123456789");
    });

    expect(result.current.beneName).toBe("");
    expect(result.current.beneErrorStatus).toBe("500");
  });
});
